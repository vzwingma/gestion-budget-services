name: CI on Snapshot

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, feat/quarkus ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # BUILD COMMUNS
  build-communs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # Runs the Build with Maven
      - name: Build Communs with Maven
        run: mvn clean install -B --file communs/pom.xml

    # SONAR
  sonar-scan:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        - name: Set up JDK 17
          uses: actions/setup-java@v1
          with:
            java-version: 17
        # Step that does that actual cache save and restore
        - uses: actions/cache@v1
          with:
            path: ~/.m2/repository
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-maven-
        # Runs a single command using the runners shell
        - name: Build with Maven
          run: mvn clean compile sonar:sonar -B -P prod -Dsonar.host.url=${{ secrets.SONAR_HOST }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=${{ secrets.SONAR_ORG }} -Dsonar.projectKey=gestion-budget-services --file pom.xml
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # BUILD
  build-quarkus-parametrages:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build-communs
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}          
      # Step that does that actual cache save and restore
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # Runs a single command using the runners shell
      - name: Build Parametrage Native App with Maven
        run: mvn clean install -B -P native --file parametrages/pom.xml
      # Upload Releases Snapshot
      - uses: actions/upload-artifact@v2
        name: Upload Service Paramétrages
        with:
          name: parametrages-runner
          path: /home/runner/work/gestion-budget-services/gestion-budget-services/parametrages/target/parametrages-runner

      # Upload Docker
      - uses: actions/upload-artifact@v2
        name: Upload DockerFile Params
        with:
          name: Dockerfile.native-micro
          path: /home/runner/work/gestion-budget-services/gestion-budget-services/parametrages/src/main/docker/Dockerfile.native-micro



  #      - uses: actions/upload-artifact@v2
  #        name: Upload Service Utilisateurs
  #        with:
  #          path: /home/runner/work/gestion-budget-services/gestion-budget-services/utilisateurs_service/target/service-utilisateurs.jar
  #          name: service-utilisateurs.jar
  #      - uses: actions/upload-artifact@v2
  #        name: Upload Service Budgets
  #        with:
  #          path: /home/runner/work/gestion-budget-services/gestion-budget-services/budgets_service/target/service-budgets.jar
  #          name: service-budgets.jar
  #      - uses: actions/upload-artifact@v2
  #        name: Upload Service Comptes
  #        with:
  #          path: /home/runner/work/gestion-budget-services/gestion-budget-services/comptes_service/target/service-comptes.jar
  #          name: service-comptes.jar
#      - uses: actions/upload-artifact@v2
#        name: Upload DockerFile Utilisateurs
#        with:
#          path: /home/runner/work/gestion-budget-services/gestion-budget-services/utilisateurs_service/src/main/external-ressources/docker/Dockerfile-UTILISATEURS_SERVICE
#          name: Dockerfile-UTILISATEURS_SERVICE
#      - uses: actions/upload-artifact@v2
#        name: Upload DockerFile Budgets
#        with:
#          path: /home/runner/work/gestion-budget-services/gestion-budget-services/budgets_service/src/main/external-ressources/docker/Dockerfile-BUDGETS_SERVICE
#          name: Dockerfile-BUDGETS_SERVICE
#      - uses: actions/upload-artifact@v2
#        name: Upload DockerFile Comptes
#        with:
#          path: /home/runner/work/gestion-budget-services/gestion-budget-services/comptes_service/src/main/external-ressources/docker/Dockerfile-COMPTES_SERVICE
#          name: Dockerfile-COMPTES_SERVICE

  # PUBLISH DOCKER IMAGES
  # Image PARAMETRAGES
  docker-parametrages:
    runs-on: ubuntu-latest
    needs: build-quarkus-parametrages
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/download-artifact@v3
        id: downloadService
        name: Download Service Paramétrages
        with:
          name: parametrages-runner
      - uses: actions/download-artifact@v3
        id: downloadDocker
        name: Download DockerFile Paramétrages
        with:
          name: Dockerfile.native-micro
      -
        name: Build and push Service Paramétrages
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          file: Dockerfile.native-micro
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/parametrages:quarkus-snapshot
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
